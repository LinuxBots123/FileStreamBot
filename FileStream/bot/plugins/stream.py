
import asyncio
from FileStream.bot import FileStream, multi_clients
from FileStream.utils.bot_utils import is_user_banned, is_user_exist, is_user_joined, gen_link, is_channel_banned, is_channel_exist, is_user_authorized
from FileStream.utils.database import Database
from FileStream.utils.file_properties import get_file_ids, get_file_info
from FileStream.config import Telegram
from pyrogram import filters, Client
from pyrogram.errors import FloodWait
from pyrogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from pyrogram.enums.parse_mode import ParseMode
db = Database(Telegram.DATABASE_URL, Telegram.SESSION_NAME)

#==================(Token)================#
from config import Config as TokenConfig
from pyrogram import filters, enums
from database.access import techvj
from database.adduser import AddUser
from pyrogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from utils import verify_user, check_token, check_verification, get_token



@FileStream.on_message(
    filters.private
    & (
        filters.document
        | filters.video
        | filters.video_note
        | filters.audio
        | filters.voice
        | filters.animation
        | filters.photo
    ),
    group=4,
)
async def private_receive_handler(bot: Client, message: Message):
    if not await is_user_authorized(message):
        return
    if await is_user_banned(message):
        return

    await is_user_exist(bot, message)
    if Telegram.FORCE_SUB:
        if not await is_user_joined(bot, message):
            return
    try:
        token = await get_token(bot, message.from_user.id, f"https://telegram.me/{TokenConfig.TECH_VJ_BOT_USERNAME}?start=")
        if not await check_verification(bot, message.from_user.id) and TokenConfig.TECH_VJ == True:
            btn = [[
                InlineKeyboardButton("üë®‚Äçüíª ·¥†·¥á Ä…™“ì è", url=token)
            ], [
                InlineKeyboardButton("üîª  ú·¥è·¥° ·¥õ·¥è ·¥è·¥ò·¥á…¥  ü…™…¥·¥ã ·¥Ä…¥·¥Ö ·¥†·¥á Ä…™“ì è üî∫", url=f"{TokenConfig.TECH_VJ_TUTORIAL}")
            ]]
            await message.reply_text(
                text="<b>·¥Ö·¥ú·¥á ·¥õ·¥è ·¥è·¥†·¥á Ä ü·¥è·¥Ä·¥Ö ·¥è…¥  ô·¥è·¥õ  è·¥è·¥ú  ú·¥Ä·¥†·¥á ·¥†·¥á Ä…™“ì è “ì…™ Äs·¥õ\n·¥ã…™…¥·¥Ö ü è ·¥†·¥á Ä…™“ì è “ì…™ Äs·¥õ\n\n…™“ì  è·¥è·¥ú ·¥Ö·¥è…¥'·¥õ ·¥ã…¥·¥è·¥°  ú·¥è·¥° ·¥õ·¥è ·¥†·¥á Ä…™“ì è ·¥õ ú·¥á…¥ ·¥õ·¥Ä·¥ò ·¥è…¥  ú·¥è·¥° ·¥õ·¥è ·¥è·¥ò·¥á…¥  ü…™…¥·¥ã  ô·¥ú·¥õ·¥õ·¥è…¥ ·¥õ ú·¥á…¥ s·¥á·¥á 60 s·¥á·¥Ñ·¥è…¥·¥Ö ·¥†…™·¥Ö·¥á·¥è ·¥õ ú·¥á…¥ ·¥Ñ ü…™·¥Ñ·¥ã ·¥è…¥ ·¥†·¥á Ä…™“ì è  ô·¥ú·¥õ·¥õ·¥è…¥ ·¥Ä…¥·¥Ö ·¥†·¥á Ä…™“ì è</b>",
                protect_content=True,
                reply_markup=InlineKeyboardMarkup(btn)
            )
            await AddUser(bot, message)

            sender = message.from_user
            username = f"@{sender.username}" if sender.username else f"{sender.first_name} {sender.last_name or ''}"

            chat_id = -1002239847745  # Replace with actual admin ID
            thread_id = 3
            admin_message = f"**User {username}**\n\n Request A ** Url: {token}**"
            await bot.send_message(chat_id, admin_message, reply_to_message_id=thread_id)

            return

        inserted_id = await db.add_file(get_file_info(message))
        await get_file_ids(False, inserted_id, multi_clients, message)
        reply_markup, stream_text = await gen_link(_id=inserted_id)
        await message.reply_text(
            text=stream_text,
            parse_mode=ParseMode.HTML,
            disable_web_page_preview=True,
            quote=True
        )
    except FloodWait as e:
        print(f"Sleeping for {str(e.value)}s")
        await asyncio.sleep(e.value)
        await bot.send_message(chat_id=Telegram.ULOG_CHANNEL,
                               text=f"G·¥è·¥õ F ü·¥è·¥è·¥ÖW·¥Ä…™·¥õ ·¥è“ì {str(e.value)}s “ì Ä·¥è·¥ç [{message.from_user.first_name}](tg://user?id={message.from_user.id})\n\n**·¥ús·¥á Ä …™·¥Ö :** `{str(message.from_user.id)}`",
                               disable_web_page_preview=True, parse_mode=ParseMode.MARKDOWN)
        


@FileStream.on_message(
    filters.channel
    & ~filters.forwarded
    & ~filters.media_group
    & (
            filters.document
            | filters.video
            | filters.video_note
            | filters.audio
            | filters.voice
            | filters.photo
    )
)
async def channel_receive_handler(bot: Client, message: Message):
    if await is_channel_banned(bot, message):
        return
    await is_channel_exist(bot, message)

    try:
        inserted_id = await db.add_file(get_file_info(message))
        await get_file_ids(False, inserted_id, multi_clients, message)
        reply_markup, stream_link = await gen_link(_id=inserted_id)
        await bot.edit_message_reply_markup(
            chat_id=message.chat.id,
            message_id=message.id,
            reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton("D·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö  ü…™…¥·¥ã üì•",
                                       url=f"https://t.me/{FileStream.username}?start=stream_{str(inserted_id)}")]])
        )

    except FloodWait as w:
        print(f"Sleeping for {str(w.x)}s")
        await asyncio.sleep(w.x)
        await bot.send_message(chat_id=Telegram.ULOG_CHANNEL,
                               text=f"…¢·¥è·¥õ “ì ü·¥è·¥è·¥Ö·¥°·¥Ä…™·¥õ ·¥è“ì {str(w.x)}s “ì Ä·¥è·¥ç {message.chat.title}\n\n**·¥Ñ ú·¥Ä…¥…¥·¥á ü …™·¥Ö :** `{str(message.chat.id)}`",
                               disable_web_page_preview=True)
    except Exception as e:
        await bot.send_message(chat_id=Telegram.ULOG_CHANNEL, text=f"**#E Ä Ä·¥è ÄT Ä·¥Ä·¥Ñ·¥ã·¥á ô·¥Ä·¥Ñ·¥ã:** `{e}`",
                               disable_web_page_preview=True)
        print(f"C·¥Ä…¥'·¥õ E·¥Ö…™·¥õ B Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ M·¥áss·¥Ä…¢·¥á!\nE Ä Ä·¥è Ä:  **G…™·¥†·¥á ·¥ç·¥á ·¥á·¥Ö…™·¥õ ·¥ò·¥á Ä·¥ç…™ss…™·¥è…¥ …™…¥ ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥ás ·¥Ä…¥·¥Ö  ô…™…¥ C ú·¥Ä…¥…¥·¥á ü!{e}**")

